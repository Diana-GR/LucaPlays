const canvas = document.getElementById('gameCanvas');
const context = canvas.getContext('2d');

const width = window.innerWidth;
const height = window.innerHeight;

canvas.width = width > height ? height * 0.8 : width * 0.8;
canvas.height = canvas.width;

// Ajuste de tamaño del canvas en respuesta a cambios en el tamaño de la ventana
window.addEventListener('resize', () => {
    const width = window.innerWidth;
    const height = window.innerHeight;
    canvas.width = width > height ? height * 0.8 : width * 0.8;
    canvas.height = canvas.width;
});

const gridSize = 20;
const tileCount = canvas.width / gridSize;

let pacMan = {
    x: tileCount / 2,
    y: tileCount / 2,
    dx: 0,
    dy: 0,
    size: gridSize / 2
};
// let pacMan = {
//     x: Math.floor(tileCount / 2),
//     y: Math.floor(tileCount / 2),
//     dx: 0,
//     dy: 0,
//     size: gridSize / 2
// };
const maze = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1],
    [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],
    [1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1],
    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
];

function drawMaze() {
    for (let row = 0; row < maze.length; row++) {
        for (let col = 0; col < maze[row].length; col++) {
            if (maze[row][col] === 1) {
                context.fillStyle = 'blue';
                context.fillRect(col * gridSize, row * gridSize, gridSize, gridSize);
            }
        }
    }
}

document.addEventListener('keydown', movePacMan);

function movePacMan(event) {
    switch(event.key) {
        case 'ArrowUp':
            pacMan.dy = -1;
            pacMan.dx = 0;
            break;
        case 'ArrowDown':
            pacMan.dy = 1;
            pacMan.dx = 0;
            break;
        case 'ArrowLeft':
            pacMan.dx = -1;
            pacMan.dy = 0;
            break;
        case 'ArrowRight':
            pacMan.dx = 1;
            pacMan.dy = 0;
            break;
    }
    updatePacManPosition();
}

// function updatePacManPosition() {
//     pacMan.x += pacMan.dx;
//     pacMan.y += pacMan.dy;

//     // Mantén a Pac-Man dentro de los límites
//     if (pacMan.x < 0) pacMan.x = tileCount - 1;
//     if (pacMan.x >= tileCount) pacMan.x = 0;
//     if (pacMan.y < 0) pacMan.y = tileCount - 1;
//     if (pacMan.y >= tileCount) pacMan.y = 0;
// }
function updatePacManPosition() {
    const nextX = pacMan.x + pacMan.dx;
    const nextY = pacMan.y + pacMan.dy;

    // Comprueba si la siguiente posición es una pared
    if (maze[nextY][nextX] !== 1) {
        pacMan.x = nextX;
        pacMan.y = nextY;
    }

    // Mantén a Pac-Man dentro de los límites
    if (pacMan.x < 0) pacMan.x = tileCount - 1;
    if (pacMan.x >= tileCount) pacMan.x = 0;
    if (pacMan.y < 0) pacMan.y = tileCount - 1;
    if (pacMan.y >= tileCount) pacMan.y = 0;
}


let touchStartX = 0;
let touchStartY = 0;

canvas.addEventListener('touchstart', function(event) {
    touchStartX = event.touches[0].clientX;
    touchStartY = event.touches[0].clientY;
}, false);

canvas.addEventListener('touchend', function(event) {
    let touchEndX = event.changedTouches[0].clientX;
    let touchEndY = event.changedTouches[0].clientY;

    let deltaX = touchEndX - touchStartX;
    let deltaY = touchEndY - touchStartY;

    if (Math.abs(deltaX) > Math.abs(deltaY)) {
        // Movimiento horizontal
        if (deltaX > 0) {
            pacMan.dx = 1;
            pacMan.dy = 0;
        } else {
            pacMan.dx = -1;
            pacMan.dy = 0;
        }
    } else {
        // Movimiento vertical
        if (deltaY > 0) {
            pacMan.dx = 0;
            pacMan.dy = 1;
        } else {
            pacMan.dx = 0;
            pacMan.dy = -1;
        }
    }
    updatePacManPosition();
}, false);

function drawPacMan() {
    context.fillStyle = 'yellow';
    context.beginPath();
    context.arc(pacMan.x * gridSize, pacMan.y * gridSize, pacMan.size, 0.2 * Math.PI, 1.8 * Math.PI);
    context.lineTo(pacMan.x * gridSize, pacMan.y * gridSize);
    context.fill();
}

// function update() {
//     context.clearRect(0, 0, canvas.width, canvas.height);
//     drawPacMan();
//     requestAnimationFrame(update);
// }
function update() {
    context.clearRect(0, 0, canvas.width, canvas.height);
    drawMaze();
    drawPacMan();
    requestAnimationFrame(update);
}

update();